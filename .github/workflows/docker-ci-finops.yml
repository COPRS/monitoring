name: Docker CI FINOPS

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches:
      - release/*
    paths:
      - 'finops/**'
      - '.github/workflows/docker-ci-finops.yml'
    tags:
      - "[0-9]+.[0-9]+.[0-9]+-rc[0-9]+"
  workflow_dispatch:

env:
  REGISTRY_BASE: artifactory.coprs.esa-copernicus.eu
  IMAGE_NAME: finops
  ARTIFACTORY_PROJECT: cs-docker
  ARTIFACTORY_USERNAME: ${{ secrets.CS_ARTIFACTORY_USER }}
  ARTIFACTORY_PASSWORD: ${{ secrets.CS_ARTIFACTORY_PASSWORD }}
  GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [object-storage-exporter, resources-exporter]
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:

      - name: Set environment variables
        run: |
          # Short name for current branch. For PRs, use target branch (base ref)
          GIT_BRANCH=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
          
      - name: checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all history so multiple commits can be scanned

      - name: GitGuardian scan
        uses: GitGuardian/gg-shield-action@master
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ env.GITGUARDIAN_API_KEY }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY_BASE }}/${{ env.ARTIFACTORY_PROJECT }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}


      # Build Docker image using Buildx
      # This Action automatically pull the code from the branch it's launched from
      # https://github.com/docker/build-push-action
      - name: Build image
        uses: docker/build-push-action@v2
        with:
          load: true
          context: ./${{ env.IMAGE_NAME }}/${{ matrix.component }}/
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Scan image 
        uses: anchore/scan-action@v2
        id: scan
        with:
          image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          acs-report-enable: true
          fail-build: true
          severity-cutoff: critical

      - name: Upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Upload Anchore scan json report
        uses: actions/upload-artifact@master
        with:
          name: vulnerabilities-${{ matrix.component }}
          path: ${{ steps.scan.outputs.vulnerabilities }}

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY_BASE }}/${{ env.ARTIFACTORY_PROJECT }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY_BASE }}/${{ env.ARTIFACTORY_PROJECT }}
          username: ${{ env.ARTIFACTORY_USERNAME }}
          password: ${{ env.ARTIFACTORY_PASSWORD }}

      - name: Push image
        run: |
          docker push ${{ fromJSON(steps.meta.outputs.json).tags[0] }};

  generate_reports:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [object-storage-exporter, resources-exporter]
    permissions:
      contents: read
      
    steps:
      - name: Download json report from build job
        uses: actions/download-artifact@v2
        with:
          name: vulnerabilities-${{ matrix.component }}
          
      - name: Generate CSV and intermediate HTML report
        run: |  
          echo "SEVERITY;ID;PACKAGE;VERSION;LINK" > vulnerabilities.csv
          cat vulnerabilities.json | jq -r '.matches[] | "\(.vulnerability.severity);\(.vulnerability.id);\(.artifact.name);\(.artifact.version);\(.vulnerability.links[0])"' >> vulnerabilities.csv
          echo -e '<table>\n<thead>\n<tr class="header">\n<th><p>SEVERITY</p></th>\n<th><p>ID</p></th>\n<th><p>PACKAGE</p></th>\n<th><p>VERSION</p></th>\n</tr>\n</thead>\n<tbody>' > vulnerabilities.html
          cat vulnerabilities.json | jq -r '.matches[] | "<tr>;<td><p>\(.vulnerability.severity)</p></td>;<td><p><a href=\"\(.vulnerability.links[0])\">\(.vulnerability.id)</a></p></td>;<td><p>\(.artifact.name)</p></td>;<td><p>\(.artifact.version)</p></td>;</tr>"' | tr -s ';' '\n' | sed 's!><p>Negligible! style="background-color:#FFFFFF;"><p>Negligible!g' | sed 's!><p>Low! style="background-color:#FFFC9E;"><p>Low!g' | sed 's!><p>Medium! style="background-color:#FE996B;"><p>Medium!g' | sed 's!><p>High! style="background-color:#FD6864;"><p>High!g' | sed 's!><p>Critical! style="background-color:#FE0000;"><p>Critical!g' >> vulnerabilities.html
          echo -e '</tbody>\n</table>' >> vulnerabilities.html
          
      - name: Convert HTLM to PDF
        uses: docker://ghcr.io/coprs/reference-system:dependencies_wkhtmltopdf
        with:
          args: vulnerabilities.html vulnerabilities.pdf

      - name: Upload Anchore scan reports
        uses: actions/upload-artifact@master
        with:
          name: vulnerabilities-${{ matrix.component }}
          path: |
            vulnerabilities.csv
            vulnerabilities.pdf
